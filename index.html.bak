<!DOCTYPE HTML>
<html>
<head>

<title>Gvbvdxx Terminal (Gvbvdxx's PC)</title>
<style>
.file {
	color:blue;
	cursor:pointer;
}
.file:hover {
	color:purple;
}

</style>

</head>


<body style="background:grey;font-family:arial;">
<center>
<div style="width:100%;height:calc(100vh - 180px);" id="select">
<textarea disabled id="terminal" hidden style="width:100%;height:100%;background:black;color:white;resize:none;">
welcome to my termial, if something does not work, i dont have my pc currently on.
the terminal will not do things like npm, so users cannot write files or destroy my pc.
also wait a bit, if nothing happens or you can type stuff but it does not work, it can still be connecting to the server.
also if the pc TCPS is 0 for a while, then it means im also not open rn.
</textarea>
<div id="files" style="width:100%;height:100%;background:white;color:black;">
<h1>Files</h1><br>
<button onclick="selectFile();">Upload</button><br>
<div style="width:100%;height:70%;overflow-y:scroll;" id="fileData"></div>
</div>
</div>
<br>
<input type="text" id="command">
<button id="send">Send</button>
<br><br>
<label for="directory">directory</label>
<input type="text" id="directory" value="./">
<br><br>
<select id="options">
<option value="terminal">terminal</option>
<option value="files">files</option>
</select>
<br><br>
<b id="FPS"></b>
</center>

<script>
var terminalServer = null;
var timer = 0;
var file = null;
window.fileThing = function () {}
function reconnect() {
	terminalServer = new WebSocket("wss://deciduous-flame-canidae.glitch.me");
	terminalServer.onclose = reconnect;
	terminalServer.onopen = function () {
		terminalServer.send(JSON.stringify({
			command:"getCurrentDir"
		}));
		updateDirectorys();
	};
	terminalServer.addEventListener("message", (event) => {
		var json = JSON.parse(event.data);
		if (json.command == "clearConsole") {
			document.getElementById("terminal").value = "";
		}
		if (json.command == "logMessage") {
			if (!(json.value == "[object Object]")) {
				document.getElementById("terminal").value += "\n"+json.value;
				document.getElementById("terminal").scrollTo(0,document.getElementById("terminal").scrollHeight);
			}
		}
		if (json.command == "setDir") {
			document.getElementById("directory").value = json.value;
			updateDirectorys();
		}
		if (json.command == "currentDir") {
			dir = json.value;
		}
		if (json.command == "sendFirstConnectInfo") {
			terminalServer.send(JSON.stringify({
				command:"setDir",
				value:document.getElementById("directory").value
			}));
			terminalServer.send(JSON.stringify({
				command:"getCurrentDir"
			}));
			updateDirectorys();
		}
		if (json.command == "tickPC") {
			timer += 1;
		}
		if (json.command == "fsReadFileSyncRes") {
			fileThing(json);
		}
		if (json.command == "fsReadDirSyncRes") {
			fileThing(json);
		}
	});
}
function getFile(directory,encoding,callback) {
	terminalServer.send(JSON.stringify({
		command:"fsreadFileSync",
		dir:directory,
		encoding:encoding
	}));
	window.fileThing = function (json) {callback(json.value);window.fileThing = function (json) {};};
}
function getDir(directory,callback) {
	terminalServer.send(JSON.stringify({
		command:"fsreadDirSync",
		dir:directory
	}));
	window.fileThing = function (json) {callback(json.value);window.fileThing = function (json) {};}
}
function saveFile(directory,encoding,data) {
	terminalServer.send(JSON.stringify({
		command:"fswriteFileSync",
		dir:directory,
		encoding:encoding,
		data:data
	}));
	window.fileThing = function (json) {window.fileThing = function (json) {};}
}
reconnect()
var dir = "";
document.getElementById("send").onclick = function () {
	terminalServer.send(JSON.stringify({
		command:"logMessage",
		value:dir+" > "+document.getElementById("command").value
	}));
	terminalServer.send(JSON.stringify({
		command:"runCommand",
		value:document.getElementById("command").value
	}));
	document.getElementById("command").value = "";
};
document.getElementById("command").onkeydown = function (event) {
	if (event.key == "Enter") {
		document.getElementById("send").click();
	}
};
document.getElementById("directory").onchange = function () {
	terminalServer.send(JSON.stringify({
		command:"setDir",
		value:document.getElementById("directory").value
	}));
	terminalServer.send(JSON.stringify({
		command:"getCurrentDir"
	}));
	updateDirectorys();
};
function updateWindow() {
	var children = document.getElementById("select").children;
	var index = 0;
	while (index < children.length) {
		children[index].hidden = !(children[index].id == document.getElementById("options").value);
		index += 1;
	}
}
document.getElementById("options").onchange = () => {
	updateWindow();
};
updateWindow();

function checkPCOn() {
	if (timer == 0 && terminalServer.CONNECTING == 0) {
		document.getElementById("FPS").innerHTML = "Thinking...";
	} else {
		document.getElementById("FPS").innerHTML = "PC TCPS (tick calls per second): " + timer;
	}
	timer = 0;
	setTimeout(checkPCOn, 1000); //1000ms = 1 second
}
setTimeout(checkPCOn, 1000); //1000ms = 1 second
function checkIsDir(dirname) {
	return (dirname.split(".").pop() == dirname);
} 
function updateDirectorys() {
	document.getElementById("fileData").innerHTML = "";
	getDir("./", function (data) {
		var index = 0;
		while (index < data.length) {
			var p = document.createElement("p");
			if (checkIsDir(data[index])) {
				p.innerHTML = "directory: "+data[index]+"<br>";
			} else {
				p.innerHTML = data[index]+"<br>";
				p.setAttribute("file", data[index]);
				p.onclick = function () {
					var file = this.getAttribute("file");
					getFile(file,"base64",function (data) {
						var a = document.createElement("a");
						a.href = "data:text/plain;charset=utf-8;base64,"+data;
						a.download = file;
						a.click();
					})
				};	
				//p.style.color = "blue";
				p.setAttribute("class","file");
			}
			
			document.getElementById("fileData").appendChild(p);
			index += 1;
		}
	})
}
function uploadFile() {
	var base64Start = ",";
	var reader = new FileReader();
	var file = this.files[0];
	if (this.files[0]) {
		reader.onload = function () {
			var string = reader.result.split(base64Start);
			saveFile(file.name,"base64",string.slice(1,string.length).join(""))
		};
		reader.readAsDataURL(this.files[0])
	}
}
function selectFile() {
	var fileselect = document.createElement("input");
	fileselect.type = "file";
	fileselect.onchange = uploadFile;
	fileselect.click();
}
</script>

</body>
</html>