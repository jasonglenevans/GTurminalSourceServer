<!DOCTYPE HTML>
<html>
<head>

<title>Gvbvdxx Terminal (Gvbvdxx's PC)</title>
<style>
.file {
	color:blue;
	cursor:pointer;
}
.file:hover {
	color:purple;
}
.selectObj {
	cursor:pointer;
	width:200px;
}
.selectObj:hover {
	background:#495057;
}
.selection:hover {
	cursor:pointer;
	background:#495057;
}
    .context-menu {
        position: absolute;
        text-align: center;
        background: lightgray;
        border: 1px solid black;
    }
  
    .context-menu ul {
        padding: 0px;
        margin: 0px;
        min-width: 150px;
        list-style: none;
    }
  
    .context-menu ul li {
        padding-bottom: 7px;
        padding-top: 7px;
        border: 1px solid black;
		cursor:pointer;
    }
  
    .context-menu ul li a {
        text-decoration: none;
        color: black;
    }
  
    .context-menu ul li:hover {
        background: darkgray;
    }
</style>

</head>


<body style="background:grey;font-family:arial;">
<select id="options" style="font-size:30px;background:grey;color:white;" hidden>
<option value="terminal">terminal</option>
<option value="files">files</option>
</select>
<div id="optionsNew" class="selection" onclick="document.getElementById('optionsNewSelect').hidden = false;" style="border-radius:8px;text-align:center;font-size:20px;background:#868e96;color:white;width:200px;height:32px;border-style:solid;border-color:#343a40;border-width:1px;">
	<b style="margin-top:5px;display:block;">Change Window</b>
</div>
<div id="optionsNewSelect" style="border-radius:8px;text-align:center;font-size:20px;background:#868e96;color:white;width:200px;height:150px;border-style:solid;border-color:#343a40;border-width:1px;overflow-y:auto;overflow-x:hidden;">
	<div class="selectObj" value="terminal" >Terminal</b></div>
	<div class="selectObj" value="files" >File Manager</b></div>
</div>
<script>

var optionsNewSelect = document.getElementById("optionsNewSelect");
var optionsNewBounding = document.getElementById("optionsNew").getBoundingClientRect();
optionsNewSelect.style.top = optionsNewBounding.top+"px";
optionsNewSelect.style.left = optionsNewBounding.left+"px";
optionsNewSelect.style.position = "absolute";
optionsNewSelect.hidden = true;
var index = 0;
while (optionsNewSelect.children.length > index) {
	optionsNewSelect.children[index].onclick = function () {
		document.getElementById('options').value = this.getAttribute('value');document.getElementById('options').onchange();document.getElementById('optionsNewSelect').hidden = true;
	};
	index += 1;
}
</script>
<center>
<div style="width:100%;height:calc(100vh - 180px);" id="select">
<textarea disabled id="terminal" hidden style="width:100%;height:100%;background:black;color:white;resize:none;">
welcome to my termial!
to get started, run this command: help
btw if it says thinking... for a while, im working on it, or my pc is off.
please do not destory my pc.
</textarea>
<div id="files" style="width:100%;height:100%;background:white;color:black;">
<button onclick="selectFile();">Upload</button><br>
<div style="width:100%;height:95%;overflow-y:scroll;oveflow-x:none;" id="fileData"></div>
</div>
</div>
<br>
<input type="text" id="command">
<button id="send">Send</button>
<br><br>
<label for="directory">directory</label>
<input type="text" id="directory" value="./">
<br><br>
<b id="FPS"></b>
</center>

<div id="contextMenu" class="context-menu" 
    style="display: none">
    <ul>
        <li><a href="#" id="fileDelete">Delete File</a></li>
    </ul>
</div>
<script>
window.terminalServer = null;
var timer = 0;
var file = null;
window.fileThing = function () {}
window.cxtMenuScope = null;
function reconnect() {
	window.terminalServer = new WebSocket("wss://deciduous-flame-canidae.glitch.me");
	terminalServer.onclose = reconnect;
	terminalServer.onopen = function () {
		terminalServer.send(JSON.stringify({
			command:"getCurrentDir"
		}));
		terminalServer.send(JSON.stringify({
			command:"setDir",
			value:"./"
		}));
		updateDirectorys();
	};
	terminalServer.addEventListener("message", (event) => {
		var json = JSON.parse(event.data);
		if (json.command == "clearConsole") {
			document.getElementById("terminal").value = "";
		}
		if (json.command == "logMessage") {
			if (!(json.value == "[object Object]")) {
				document.getElementById("terminal").value += "\n"+json.value;
				document.getElementById("terminal").scrollTo(0,document.getElementById("terminal").scrollHeight);
			}
		}
		if (json.command == "setDir") {
			document.getElementById("directory").value = json.value;
			updateDirectorys();
		}
		if (json.command == "currentDir") {
			dir = json.value;
		}
		if (json.command == "sendFirstConnectInfo") {
			terminalServer.send(JSON.stringify({
				command:"setDir",
				value:document.getElementById("directory").value
			}));
			terminalServer.send(JSON.stringify({
				command:"getCurrentDir"
			}));
			updateDirectorys();
		}
		if (json.command == "tickPC") {
			timer += 1;
		}
		if (json.command == "fsReadFileSyncRes") {
			fileThing(json);
		}
		if (json.command == "fsReadDirSyncRes") {
			fileThing(json);
		}
		if (json.command == "refreshFiles") {
			updateDirectorys();
		}
	});
}
function getFile(directory,encoding,callback) {
	terminalServer.send(JSON.stringify({
		command:"fsreadFileSync",
		dir:directory,
		encoding:encoding
	}));
	window.fileThing = function (json) {callback(json.value);window.fileThing = function (json) {};};
}
function getDir(directory,callback) {
	terminalServer.send(JSON.stringify({
		command:"fsreadDirSync",
		dir:directory
	}));
	window.fileThing = function (json) {callback(json.value);window.fileThing = function (json) {};}
}
function saveFile(directory,encoding,data) {
	terminalServer.send(JSON.stringify({
		command:"fswriteFileSync",
		dir:directory,
		encoding:encoding,
		data:data
	}));
	window.fileThing = function (json) {window.fileThing = function (json) {};}
}
var lastPath = [];
function goToDir(gdir) {
	lastPath.push(document.getElementById("directory").value);
	
	document.getElementById("directory").value = document.getElementById("directory").value += "/"+gdir;
	document.getElementById("directory").onchange();
}
function goBackDir(path) {
	document.getElementById("directory").value = lastPath.join("/");
	delete lastPath[lastPath.length-1];
	var index = 0;
	var otherPath = [];
	while (index < lastPath.length) {
		if (lastPath[index]) {
			otherPath.push(lastPath[index]);
		}
		index += 1;
	}
	lastPath = otherPath;
	document.getElementById("directory").onchange();
}
reconnect()
var dir = "";
document.getElementById("send").onclick = function () {
	terminalServer.send(JSON.stringify({
		command:"logMessage",
		value:dir+" > "+document.getElementById("command").value
	}));
	terminalServer.send(JSON.stringify({
		command:"runCommand",
		value:document.getElementById("command").value
	}));
	document.getElementById("command").value = "";
};
document.getElementById("command").onkeydown = function (event) {
	if (event.key == "Enter") {
		document.getElementById("send").click();
	}
};
document.getElementById("directory").onchange = function () {
	terminalServer.send(JSON.stringify({
		command:"setDir",
		value:document.getElementById("directory").value
	}));
	terminalServer.send(JSON.stringify({
		command:"getCurrentDir"
	}));
	updateDirectorys();
};
document.getElementById("directory").oninput = function () {
	lastPath = [];
};
function updateWindow() {
	var children = document.getElementById("select").children;
	var index = 0;
	while (index < children.length) {
		children[index].hidden = !(children[index].id == document.getElementById("options").value);
		index += 1;
	}
}
document.getElementById("options").onchange = () => {
	updateWindow();
};
updateWindow();

function checkPCOn() {
	if (timer == 0 && terminalServer.CONNECTING == 0) {
		document.getElementById("FPS").innerHTML = "Thinking...";
	} else {
		document.getElementById("FPS").innerHTML = "PC TCPS (tick calls per second): " + timer;
	}
	timer = 0;
	setTimeout(checkPCOn, 1000); //1000ms = 1 second
}
setTimeout(checkPCOn, 1000); //1000ms = 1 second
function checkIsDir(dirname) {
	return (dirname.split(".").pop() == dirname);
} 
function updateDirectorys() {
	document.getElementById("fileData").innerHTML = "";
	getDir("./", function (data) {
		var index = 0;
		var p = document.createElement("p");
		p.innerHTML = "<h1>"+dir+"</h1><br>";
		document.getElementById("fileData").appendChild(p);
		p.oncontextmenu = function(e){e.preventDefault()};
		var p = document.createElement("p");
		p.innerHTML = "go back directory";
		p.setAttribute("class","file");
		p.onclick = function () {
			goBackDir();
		};
		p.oncontextmenu = function(e){e.preventDefault()};
		document.getElementById("fileData").appendChild(p);
		while (index < data.length) {
			var p = document.createElement("p");
			p.setAttribute("file", data[index]);
			p.oncontextmenu = function(e){e.preventDefault()};
			if (checkIsDir(data[index])) {
				p.innerHTML = "directory: "+data[index]+"<br>";
				p.onclick = function () {
					var file = this.getAttribute("file");
					goToDir(file);
				};
				p.oncontextmenu = function (e) {
						console.log("Sending Delete...");
						terminalServer.send(JSON.stringify({
							command:'deleteDir',
							dir:this.getAttribute('file')
						}));
						e.preventDefault();
				};
			} else {
				p.innerHTML = "file: "+data[index]+"<br>";
				p.onclick = function () {
					var file = this.getAttribute("file");
					getFile(file,"base64",function (data) {
						var a = document.createElement("a");
						a.href = "data:text/plain;charset=utf-8;base64,"+data;
						a.download = file;
						a.click();
					})
				};
				p.oncontextmenu = function (e) {
						console.log("Sending Delete...");
						terminalServer.send(JSON.stringify({
							command:'deleteFile',
							dir:this.getAttribute('file')
						}));
						e.preventDefault();
				};
				//p.style.color = "blue";
			}
			p.setAttribute("class","file");
			document.getElementById("fileData").appendChild(p);
			index += 1;
		}
	})
}
function uploadFile() {
	var base64Start = ",";
	var reader = new FileReader();
	var file = this.files[0];
	if (this.files[0]) {
		reader.onload = function () {
			var string = reader.result.split(base64Start);
			saveFile(file.name,"base64",string.slice(1,string.length).join(""))
		};
		setTimeout(() => {
			terminalServer.send(JSON.stringify({
				command:"setDir",
				value:document.getElementById("directory").value
			}));
		},500)
		reader.readAsDataURL(this.files[0])
	}
}
function selectFile() {
	var fileselect = document.createElement("input");
	fileselect.type = "file";
	fileselect.onchange = uploadFile;
	fileselect.click();
}
</script>

</body>
</html>